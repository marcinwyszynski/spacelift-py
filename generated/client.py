# Generated by ariadne-codegen
# Source: graphql

from typing import Any, Dict

from .api_key_user import APIKeyUser
from .base_client import BaseClient
from .get_context_details import GetContextDetails
from .get_policy_details import GetPolicyDetails
from .get_stack_details import GetStackDetails
from .log_out import LogOut


def gql(q: str) -> str:
    return q


class Client(BaseClient):
    def api_key_user(self, id: str, secret: str, **kwargs: Any) -> APIKeyUser:
        query = gql(
            """
            mutation APIKeyUser($id: ID!, $secret: String!) {
              apiKeyUser(id: $id, secret: $secret) {
                jwt
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id, "secret": secret}
        response = self.execute(
            query=query, operation_name="APIKeyUser", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return APIKeyUser.model_validate(data)

    def log_out(self, **kwargs: Any) -> LogOut:
        query = gql(
            """
            mutation LogOut {
              logout {
                id
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = self.execute(
            query=query, operation_name="LogOut", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return LogOut.model_validate(data)

    def get_context_details(self, id: str, **kwargs: Any) -> GetContextDetails:
        query = gql(
            """
            query GetContextDetails($id: ID!) {
              context(id: $id) {
                ...contextDetails
              }
            }

            fragment contextDetails on Context {
              id
              createdAt
              description
              ...hooksDetails
              labels
              name
              space
              updatedAt
            }

            fragment hooksDetails on Hookable {
              hooks {
                afterApply
                afterDestroy
                afterInit
                afterPerform
                afterPlan
                afterRun
                beforeApply
                beforeDestroy
                beforeInit
                beforePerform
                beforePlan
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = self.execute(
            query=query,
            operation_name="GetContextDetails",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetContextDetails.model_validate(data)

    def get_policy_details(self, id: str, **kwargs: Any) -> GetPolicyDetails:
        query = gql(
            """
            query GetPolicyDetails($id: ID!) {
              policy(id: $id) {
                ...policyDetails
              }
            }

            fragment notifiableDetails on Notifiable {
              notificationCount
            }

            fragment policyDetails on Policy {
              id
              ...notifiableDetails
              body
              createdAt
              description
              labels
              name
              space
              type
              updatedAt
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = self.execute(
            query=query,
            operation_name="GetPolicyDetails",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetPolicyDetails.model_validate(data)

    def get_stack_details(self, id: str, **kwargs: Any) -> GetStackDetails:
        query = gql(
            """
            query GetStackDetails($id: ID!) {
              stack(id: $id) {
                ...stackDetails
              }
            }

            fragment hooksDetails on Hookable {
              hooks {
                afterApply
                afterDestroy
                afterInit
                afterPerform
                afterPlan
                afterRun
                beforeApply
                beforeDestroy
                beforeInit
                beforePerform
                beforePlan
              }
            }

            fragment notifiableDetails on Notifiable {
              notificationCount
            }

            fragment stackDetails on Stack {
              id
              ...hooksDetails
              ...notifiableDetails
              additionalProjectGlobs
              administrative
              autodeploy
              autoretry
              branch
              createdAt
              deleting
              description
              isDisabled
              labels
              localPreviewEnabled
              managesStateFile
              name
              namespace
              projectRoot
              promotionEnabled: githubActionDeploy
              protectFromDeletion
              provider
              repository
              repositoryURL
              runnerImage
              space
              state
              vcsDetached
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = self.execute(
            query=query, operation_name="GetStackDetails", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetStackDetails.model_validate(data)
