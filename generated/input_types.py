# Generated by ariadne-codegen
# Source: https://ilovebacon.app.spacelift.dev/graphql

from typing import List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import (
    AccountType,
    AspectGranularity,
    AspectType,
    BlueprintState,
    ConfigType,
    EntityChangePhase,
    EntityChangeType,
    KubernetesWorkflowTool,
    ManagedUserGroupIntegrationType,
    PolicyType,
    SearchQueryFieldConstraintTimeInLast,
    SearchQueryOrderDirection,
    SpaceAccessLevel,
    TerraformWorkflowTool,
    VCSProvider,
)


class APIKeyInputOIDC(BaseModel):
    issuer: str
    client_id: str = Field(alias="clientId")
    subject_expression: str = Field(alias="subjectExpression")


class ApiKeyInput(BaseModel):
    admin: bool
    name: str
    teams: List[str]
    machine: Optional[bool] = None
    oidc: Optional["APIKeyInputOIDC"] = None
    access_rules: Optional[List["SpaceAccessRuleInput"]] = Field(
        alias="accessRules", default=None
    )


class AspectInput(BaseModel):
    type: AspectType
    time_filter: "AspectTimeFilter" = Field(alias="timeFilter")
    granularity: AspectGranularity
    group_by: Optional[str] = Field(alias="groupBy", default=None)


class AspectTimeFilter(BaseModel):
    start_time: int = Field(alias="startTime")
    end_time: int = Field(alias="endTime")


class AuditTrailWebhookInput(BaseModel):
    enabled: bool
    endpoint: str
    include_runs: Optional[bool] = Field(alias="includeRuns", default=None)
    secret: str


class BlueprintCloneInput(BaseModel):
    space: str
    name: str
    description: Optional[str] = None
    labels: List[str]


class BlueprintCreateInput(BaseModel):
    space: str
    name: str
    state: BlueprintState
    description: Optional[str] = None
    labels: List[str]
    template: Optional[str] = None


class BlueprintStackCreateInput(BaseModel):
    template_inputs: Optional[List["BlueprintStackCreateInputPair"]] = Field(
        alias="templateInputs", default=None
    )


class BlueprintStackCreateInputPair(BaseModel):
    id: str
    value: str


class ConfigInput(BaseModel):
    id: str
    type: ConfigType
    value: str
    description: Optional[str] = None
    write_only: bool = Field(alias="writeOnly")
    file_mode: Optional[str] = Field(alias="fileMode", default=None)


class ContextInput(BaseModel):
    name: str
    description: Optional[str] = None
    hooks: Optional["HooksInput"] = None
    labels: Optional[List[str]] = None
    space: Optional[str] = None
    stack_attachments: Optional[List["ContextStackAttachmentInput"]] = Field(
        alias="stackAttachments", default=None
    )
    config_attachments: Optional[List["ConfigInput"]] = Field(
        alias="configAttachments", default=None
    )


class ContextStackAttachmentInput(BaseModel):
    stack: str
    priority: int


class CustomVCSInput(BaseModel):
    name: str
    description: Optional[str] = None
    space_id: str = Field(alias="spaceID")
    labels: Optional[List[str]] = None
    is_default: Optional[bool] = Field(alias="isDefault", default=None)


class CustomVCSUpdateInput(BaseModel):
    id: str
    space: str
    description: Optional[str] = None
    labels: Optional[List[str]] = None


class DriftDetectionIntegrationInput(BaseModel):
    reconcile: bool
    ignore_state: Optional[bool] = Field(alias="ignoreState", default=None)
    timezone: Optional[str] = None
    schedule: List[str]


class EntityChangeCollectionInputV2(BaseModel):
    first: Optional[int] = None
    after: Optional[str] = None
    change_type: Optional[EntityChangeType] = Field(alias="changeType", default=None)
    change_phase: Optional[EntityChangePhase] = Field(alias="changePhase", default=None)


class EntityChangesInputV3(BaseModel):
    change_phase: Optional[EntityChangePhase] = Field(alias="changePhase", default=None)
    change_type: Optional[EntityChangeType] = Field(alias="changeType", default=None)


class EnvironmentVariable(BaseModel):
    key: str
    value: str


class GitHubAppManifestInput(BaseModel):
    host: Optional[str] = None
    api_host: Optional[str] = Field(alias="apiHost", default=None)
    owner_name: Optional[str] = Field(alias="ownerName", default=None)
    owner_type: AccountType = Field(alias="ownerType")


class HooksInput(BaseModel):
    after_apply: List[str] = Field(alias="afterApply")
    after_destroy: List[str] = Field(alias="afterDestroy")
    after_init: List[str] = Field(alias="afterInit")
    after_perform: List[str] = Field(alias="afterPerform")
    after_plan: List[str] = Field(alias="afterPlan")
    after_run: List[str] = Field(alias="afterRun")
    before_apply: List[str] = Field(alias="beforeApply")
    before_destroy: List[str] = Field(alias="beforeDestroy")
    before_init: List[str] = Field(alias="beforeInit")
    before_perform: List[str] = Field(alias="beforePerform")
    before_plan: List[str] = Field(alias="beforePlan")


class KeyValuePair(BaseModel):
    key: str
    value: str


class ManagedUserGroupCreateInput(BaseModel):
    group_name: str = Field(alias="groupName")
    access_rules: List["SpaceAccessRuleInput"] = Field(alias="accessRules")


class ManagedUserGroupIntegrationCreateInput(BaseModel):
    integration_type: ManagedUserGroupIntegrationType = Field(alias="integrationType")
    integration_name: str = Field(alias="integrationName")
    slack_channel_id: str = Field(alias="slackChannelID")
    access_rules: List["SpaceAccessRuleInput"] = Field(alias="accessRules")


class ManagedUserGroupIntegrationUpdateInput(BaseModel):
    id: str
    integration_name: str = Field(alias="integrationName")
    slack_channel_id: str = Field(alias="slackChannelID")
    access_rules: List["SpaceAccessRuleInput"] = Field(alias="accessRules")


class ManagedUserGroupUpdateInput(BaseModel):
    id: str
    access_rules: List["SpaceAccessRuleInput"] = Field(alias="accessRules")


class ManagedUserInviteInput(BaseModel):
    email: Optional[str] = None
    invitation_email: Optional[str] = Field(alias="invitationEmail", default=None)
    username: str
    access_rules: List["SpaceAccessRuleInput"] = Field(alias="accessRules")
    slack_member_id: Optional[str] = Field(alias="slackMemberID", default=None)


class ManagedUserUpdateInput(BaseModel):
    id: str
    access_rules: List["SpaceAccessRuleInput"] = Field(alias="accessRules")
    slack_member_id: Optional[str] = Field(alias="slackMemberID", default=None)


class ModuleCreateInput(BaseModel):
    update_input: "ModuleUpdateInput" = Field(alias="updateInput")
    name: Optional[str] = None
    namespace: Optional[str] = None
    provider: Optional[VCSProvider] = None
    repository: str
    repository_url: Optional[str] = Field(alias="repositoryURL", default=None)
    space: Optional[str] = None
    terraform_provider: Optional[str] = Field(alias="terraformProvider", default=None)
    vcs_integration_id: Optional[str] = Field(alias="vcsIntegrationId", default=None)
    workflow_tool: Optional[TerraformWorkflowTool] = Field(
        alias="workflowTool", default=None
    )


class ModuleUpdateInput(BaseModel):
    administrative: bool
    branch: str
    description: Optional[str] = None
    github_action_deploy: Optional[bool] = Field(
        alias="githubActionDeploy", default=None
    )
    is_disabled: Optional[bool] = Field(alias="isDisabled", default=None)
    labels: Optional[List[str]] = None
    protect_from_deletion: Optional[bool] = Field(
        alias="protectFromDeletion", default=None
    )
    local_preview_enabled: Optional[bool] = Field(
        alias="localPreviewEnabled", default=None
    )
    project_root: Optional[str] = Field(alias="projectRoot", default=None)
    shared_accounts: Optional[List[str]] = Field(alias="sharedAccounts", default=None)
    space: Optional[str] = None
    worker_pool: Optional[str] = Field(alias="workerPool", default=None)


class ModuleUpdateV2Input(BaseModel):
    administrative: bool
    branch: str
    description: Optional[str] = None
    github_action_deploy: Optional[bool] = Field(
        alias="githubActionDeploy", default=None
    )
    labels: Optional[List[str]] = None
    local_preview_enabled: Optional[bool] = Field(
        alias="localPreviewEnabled", default=None
    )
    namespace: Optional[str] = None
    provider: Optional[VCSProvider] = None
    repository: str
    repository_url: Optional[str] = Field(alias="repositoryURL", default=None)
    project_root: Optional[str] = Field(alias="projectRoot", default=None)
    protect_from_deletion: Optional[bool] = Field(
        alias="protectFromDeletion", default=None
    )
    shared_accounts: Optional[List[str]] = Field(alias="sharedAccounts", default=None)
    space: Optional[str] = None
    vcs_integration_id: Optional[str] = Field(alias="vcsIntegrationId", default=None)
    worker_pool: Optional[str] = Field(alias="workerPool", default=None)
    workflow_tool: Optional[TerraformWorkflowTool] = Field(
        alias="workflowTool", default=None
    )


class NamedWebhookHeaderInput(BaseModel):
    entries: List["KeyValuePair"]


class NamedWebhooksIntegrationInput(BaseModel):
    space: str
    enabled: bool
    endpoint: str
    name: str
    secret: str
    labels: List[str]


class PolicyCreateInput(BaseModel):
    name: str
    body: str
    type: PolicyType
    labels: Optional[List[str]] = None
    space: Optional[str] = None
    description: Optional[str] = None
    policy_template_ulid: Optional[str] = Field(
        alias="policyTemplateULID", default=None
    )


class PolicyLibrariesInput(BaseModel):
    libraries: List["PolicyLibraryInput"]


class PolicyLibraryInput(BaseModel):
    name: str
    body: str


class PolicyUpdateInput(BaseModel):
    name: str
    body: str
    labels: Optional[List[str]] = None
    space: Optional[str] = None
    description: Optional[str] = None


class SavedFilterInput(BaseModel):
    is_public: bool = Field(alias="isPublic")
    name: str
    data: str
    type: str


class ScheduledDeleteInput(BaseModel):
    timezone: Optional[str] = None
    cron_schedule: Optional[List[str]] = Field(alias="cronSchedule", default=None)
    timestamp_schedule: Optional[int] = Field(alias="timestampSchedule", default=None)
    should_delete_resources: bool = Field(alias="shouldDeleteResources")


class ScheduledTaskInput(BaseModel):
    timezone: Optional[str] = None
    cron_schedule: Optional[List[str]] = Field(alias="cronSchedule", default=None)
    timestamp_schedule: Optional[int] = Field(alias="timestampSchedule", default=None)
    command: str


class SearchInput(BaseModel):
    first: Optional[int] = None
    after: Optional[str] = None
    order_by: Optional[List["SearchQueryOrder"]] = Field(alias="orderBy", default=None)
    full_text_search: Optional[str] = Field(alias="fullTextSearch", default=None)
    predicates: Optional[List["SearchQueryPredicate"]] = None


class SearchQueryFieldConstraint(BaseModel):
    boolean_equals: Optional[List[bool]] = Field(alias="booleanEquals", default=None)
    enum_equals: Optional[List[str]] = Field(alias="enumEquals", default=None)
    string_matches: Optional[List[str]] = Field(alias="stringMatches", default=None)
    hierarchy_node_value_equals: Optional[List[str]] = Field(
        alias="hierarchyNodeValueEquals", default=None
    )
    time_in_range: Optional["SearchQueryFieldConstraintTimeInRange"] = Field(
        alias="timeInRange", default=None
    )
    time_in_last: Optional[SearchQueryFieldConstraintTimeInLast] = Field(
        alias="timeInLast", default=None
    )


class SearchQueryFieldConstraintTimeInRange(BaseModel):
    start: Optional[int] = None
    end: Optional[int] = None


class SearchQueryOrder(BaseModel):
    field: str
    direction: Optional[SearchQueryOrderDirection] = None


class SearchQueryPredicate(BaseModel):
    field: str
    exclude: Optional[bool] = None
    constraint: "SearchQueryFieldConstraint"


class SearchSuggestionsInput(BaseModel):
    full_text_search: Optional[str] = Field(alias="fullTextSearch", default=None)
    predicates: Optional[List["SearchQueryPredicate"]] = None
    fields: Optional[List[str]] = None


class SpaceAccessRuleInput(BaseModel):
    space: str
    space_access_level: SpaceAccessLevel = Field(alias="spaceAccessLevel")


class SpaceInput(BaseModel):
    parent_space: str = Field(alias="parentSpace")
    name: str
    description: str
    inherit_entities: bool = Field(alias="inheritEntities")
    labels: Optional[List[str]] = None


class StackConfigVendorAnsibleInput(BaseModel):
    playbook: str


class StackConfigVendorCloudFormationInput(BaseModel):
    entry_template_file: str = Field(alias="entryTemplateFile")
    template_bucket: str = Field(alias="templateBucket")
    stack_name: str = Field(alias="stackName")
    region: str


class StackConfigVendorInput(BaseModel):
    ansible: Optional["StackConfigVendorAnsibleInput"] = None
    cloud_formation: Optional["StackConfigVendorCloudFormationInput"] = Field(
        alias="cloudFormation", default=None
    )
    kubernetes: Optional["StackConfigVendorKubernetesInput"] = None
    pulumi: Optional["StackConfigVendorPulumiInput"] = None
    terraform: Optional["StackConfigVendorTerraformInput"] = None
    terragrunt: Optional["StackConfigVendorTerragruntInput"] = None


class StackConfigVendorKubernetesInput(BaseModel):
    namespace: str
    kubectl_version: Optional[str] = Field(alias="kubectlVersion", default=None)
    kubernetes_workflow_tool: Optional[KubernetesWorkflowTool] = Field(
        alias="kubernetesWorkflowTool", default=None
    )


class StackConfigVendorPulumiInput(BaseModel):
    login_url: str = Field(alias="loginURL")
    stack_name: str = Field(alias="stackName")


class StackConfigVendorTerraformInput(BaseModel):
    version: Optional[str] = None
    workspace: Optional[str] = None
    use_smart_sanitization: Optional[bool] = Field(
        alias="useSmartSanitization", default=None
    )
    external_state_access_enabled: Optional[bool] = Field(
        alias="externalStateAccessEnabled", default=None
    )
    workflow_tool: Optional[TerraformWorkflowTool] = Field(
        alias="workflowTool", default=None
    )


class StackConfigVendorTerragruntInput(BaseModel):
    terraform_version: Optional[str] = Field(alias="terraformVersion", default=None)
    terragrunt_version: Optional[str] = Field(alias="terragruntVersion", default=None)
    use_run_all: bool = Field(alias="useRunAll")
    use_smart_sanitization: bool = Field(alias="useSmartSanitization")


class StackDependencyBatchInput(BaseModel):
    dependencies: List["StackDependencyInput"]


class StackDependencyInput(BaseModel):
    stack_id: str = Field(alias="stackId")
    depends_on_stack_id: str = Field(alias="dependsOnStackId")


class StackDependencyReferenceInput(BaseModel):
    output_name: str = Field(alias="outputName")
    input_name: str = Field(alias="inputName")
    type: Optional[ConfigType] = None


class StackDependencyReferenceUpdateInput(BaseModel):
    output_name: str = Field(alias="outputName")
    input_name: str = Field(alias="inputName")
    type: Optional[ConfigType] = None
    id: str


class StackInput(BaseModel):
    administrative: bool
    autodeploy: Optional[bool] = None
    autoretry: Optional[bool] = None
    after_apply: Optional[List[str]] = Field(alias="afterApply", default=None)
    before_apply: Optional[List[str]] = Field(alias="beforeApply", default=None)
    after_init: Optional[List[str]] = Field(alias="afterInit", default=None)
    before_init: Optional[List[str]] = Field(alias="beforeInit", default=None)
    after_plan: Optional[List[str]] = Field(alias="afterPlan", default=None)
    before_plan: Optional[List[str]] = Field(alias="beforePlan", default=None)
    after_perform: Optional[List[str]] = Field(alias="afterPerform", default=None)
    before_perform: Optional[List[str]] = Field(alias="beforePerform", default=None)
    after_destroy: Optional[List[str]] = Field(alias="afterDestroy", default=None)
    after_run: Optional[List[str]] = Field(alias="afterRun", default=None)
    before_destroy: Optional[List[str]] = Field(alias="beforeDestroy", default=None)
    branch: str
    description: Optional[str] = None
    github_action_deploy: Optional[bool] = Field(
        alias="githubActionDeploy", default=None
    )
    is_disabled: Optional[bool] = Field(alias="isDisabled", default=None)
    labels: Optional[List[str]] = None
    local_preview_enabled: Optional[bool] = Field(
        alias="localPreviewEnabled", default=None
    )
    name: str
    namespace: Optional[str] = None
    project_root: Optional[str] = Field(alias="projectRoot", default=None)
    additional_project_globs: Optional[List[str]] = Field(
        alias="additionalProjectGlobs", default=None
    )
    protect_from_deletion: Optional[bool] = Field(
        alias="protectFromDeletion", default=None
    )
    provider: Optional[VCSProvider] = None
    repository: str
    repository_url: Optional[str] = Field(alias="repositoryURL", default=None)
    runner_image: Optional[str] = Field(alias="runnerImage", default=None)
    space: Optional[str] = None
    terraform_version: Optional[str] = Field(alias="terraformVersion", default=None)
    vcs_integration_id: Optional[str] = Field(alias="vcsIntegrationId", default=None)
    vendor_config: Optional["StackConfigVendorInput"] = Field(
        alias="vendorConfig", default=None
    )
    worker_pool: Optional[str] = Field(alias="workerPool", default=None)


class SubscriptionInput(BaseModel):
    address: str
    city: str
    company_name: Optional[str] = Field(alias="companyName", default=None)
    country: str
    email: str
    full_name: str = Field(alias="fullName")
    state: Optional[str] = None
    zip_code: str = Field(alias="zipCode")


class TerraformProviderVersionInput(BaseModel):
    number: str
    protocol_versions: List[str] = Field(alias="protocolVersions")
    signing_key_id: str = Field(alias="signingKeyId")
    sha_sums_file_sha: str = Field(alias="shaSumsFileSHA")
    signature_file_sha: str = Field(alias="signatureFileSHA")


class TerraformProviderVersionPlatformInput(BaseModel):
    archive_checksum: str = Field(alias="archiveChecksum")
    binary_checksum: str = Field(alias="binaryChecksum")
    architecture: str
    os: str


class WebhooksIntegrationInput(BaseModel):
    enabled: bool
    endpoint: str
    secret: str
