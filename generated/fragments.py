# Generated by ariadne-codegen
# Source: graphql

from typing import List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import StackState, VCSProvider


class ContextDetails(BaseModel):
    id: str
    created_at: int = Field(alias="createdAt")
    description: Optional[str]
    hooks: "ContextDetailsHooks"
    labels: List[str]
    name: str
    space: str
    updated_at: int = Field(alias="updatedAt")


class ContextDetailsHooks(BaseModel):
    after_apply: List[str] = Field(alias="afterApply")
    after_destroy: List[str] = Field(alias="afterDestroy")
    after_init: List[str] = Field(alias="afterInit")
    after_perform: List[str] = Field(alias="afterPerform")
    after_plan: List[str] = Field(alias="afterPlan")
    after_run: List[str] = Field(alias="afterRun")
    before_apply: List[str] = Field(alias="beforeApply")
    before_destroy: List[str] = Field(alias="beforeDestroy")
    before_init: List[str] = Field(alias="beforeInit")
    before_perform: List[str] = Field(alias="beforePerform")
    before_plan: List[str] = Field(alias="beforePlan")


class HooksDetails(BaseModel):
    hooks: "HooksDetailsHooks"


class HooksDetailsHooks(BaseModel):
    after_apply: List[str] = Field(alias="afterApply")
    after_destroy: List[str] = Field(alias="afterDestroy")
    after_init: List[str] = Field(alias="afterInit")
    after_perform: List[str] = Field(alias="afterPerform")
    after_plan: List[str] = Field(alias="afterPlan")
    after_run: List[str] = Field(alias="afterRun")
    before_apply: List[str] = Field(alias="beforeApply")
    before_destroy: List[str] = Field(alias="beforeDestroy")
    before_init: List[str] = Field(alias="beforeInit")
    before_perform: List[str] = Field(alias="beforePerform")
    before_plan: List[str] = Field(alias="beforePlan")


class NotifiableDetails(BaseModel):
    notification_count: int = Field(alias="notificationCount")


class StackDetails(BaseModel):
    id: str
    hooks: "StackDetailsHooks"
    notification_count: int = Field(alias="notificationCount")
    additional_project_globs: List[str] = Field(alias="additionalProjectGlobs")
    administrative: bool
    autodeploy: bool
    autoretry: bool
    branch: str
    created_at: int = Field(alias="createdAt")
    deleting: bool
    description: Optional[str]
    is_disabled: bool = Field(alias="isDisabled")
    labels: List[str]
    local_preview_enabled: bool = Field(alias="localPreviewEnabled")
    manages_state_file: bool = Field(alias="managesStateFile")
    name: str
    namespace: str
    project_root: Optional[str] = Field(alias="projectRoot")
    promotion_enabled: bool = Field(alias="promotionEnabled")
    protect_from_deletion: bool = Field(alias="protectFromDeletion")
    provider: VCSProvider
    repository: str
    repository_url: Optional[str] = Field(alias="repositoryURL")
    runner_image: Optional[str] = Field(alias="runnerImage")
    space: str
    state: StackState
    vcs_detached: bool = Field(alias="vcsDetached")


class StackDetailsHooks(BaseModel):
    after_apply: List[str] = Field(alias="afterApply")
    after_destroy: List[str] = Field(alias="afterDestroy")
    after_init: List[str] = Field(alias="afterInit")
    after_perform: List[str] = Field(alias="afterPerform")
    after_plan: List[str] = Field(alias="afterPlan")
    after_run: List[str] = Field(alias="afterRun")
    before_apply: List[str] = Field(alias="beforeApply")
    before_destroy: List[str] = Field(alias="beforeDestroy")
    before_init: List[str] = Field(alias="beforeInit")
    before_perform: List[str] = Field(alias="beforePerform")
    before_plan: List[str] = Field(alias="beforePlan")


ContextDetails.model_rebuild()
HooksDetails.model_rebuild()
NotifiableDetails.model_rebuild()
StackDetails.model_rebuild()
